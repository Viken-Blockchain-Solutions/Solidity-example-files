// SPDX-License-Identifier: MIT

pragma solidity ^0.8.11;
interface ISingleStaking {
    function addStake(uint256 _amount) external;
    function withdrawStake(uint256 _amount) external;
    function pendingCent(address _user) external view returns (uint256);
    function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);
    function emergencyWithdraw() external;
}


pragma solidity ^0.8.11;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

contract TokenVault is Ownable, Pausable {
    using SafeERC20 for IERC20;
    using SafeMath for uint256;

    struct UserInfo {
        uint256 amount; // amount of tokens in vault.
        uint256 rewardPending; // pending reward.
        uint256 shares; // number of shares for a user.
        uint256 lastDepositedTime; // keeps track of deposited time for potential penalty.
        uint256 tokensAtLastUserAction; // keeps track of tokens deposited at the last user action.
        uint256 lastUserActionTime; // keeps track of the last user action time.
    }

    /**
     * @notice VaultInfo Struct with the staking data of the pool.
     * @param token Address of staked token.
     * @param allocPoint The amount of allocation points assigned to this pool.
     * @param lastRewardBlock Last block number that CENT distribution occures.
     * @param accTokenPerShare Accumulated Tokens per share, times 1e12.
     * @param totCentStakedInPool Accumulated Tokens staked in Vault.
    */
    struct VaultInfo {
        IERC20 token;
        uint256 allocPoint;
        uint256 lastRewardBlock;
        uint256 accTokenPerShare;
        uint256 totCentStakedInVault;
    }

    IERC20 public immutable token; // erc20 token
    // ISingleStaking public immutable singleStaking;
    VaultInfo public vaultInfo;

    mapping(address => UserInfo) public userInfo;

    bool public initialized;
    uint256 public totalShares;
    uint256 public totalAllocPoint;
    uint256 public lastHarvestedTime;
    uint256 public startBlock;
    uint256 public BONUS_MULTIPLIER;
    address public admin;
    address public dev;
    address public treasury;

    uint256 public constant MAX_PERFORMANCE_FEE = 2000; // 20%
    uint256 public constant MAX_CALL_FEE = 500; // 5%
    uint256 public constant MAX_WITHDRAW_FEE = 1000; // 10%
    uint256 public constant MAX_WITHDRAW_FEE_PERIOD = 120 hours; // 5 days

    uint256 public performanceFee = 500; // 5%
    uint256 public callFee = 25; // 0.25%
    uint256 public withdrawFee = 300; // 3%
    uint256 public withdrawFeePeriod = 72 hours; // 3 days

    error NotAuthorized();
    error NonZeroValues();
    error OnlyOnce();
    error TransferFailed();

    event Deposit(address indexed sender, uint256 amount, uint256 shares, uint256 lastDepositedTime);
    event Withdraw(address indexed sender, uint256 amount, uint256 shares);
    event Harvest(address indexed sender, uint256 performanceFee, uint256 callFee);
    event Pause();
    event Unpause();

    /**
     * @notice Constructor.
     * @param _token: erc20 token contract.
     * @param _singleStaking: SingleStaking contract.
     * @param _admin: address of the admin.
     * @param _dev: address of the dev.
     * @param _treasury: address of the treasury (collects fees).
     */
    constructor(
        IERC20 _token,
        //ISingleStaking _singleStaking,
        address _admin,
        address _treasury,
        address _dev
    ) {
        token = _token;
        //singleStaking = _singleStaking;
        admin = _admin;
        treasury = _treasury;
        dev = _dev;

        // Infinite approve
        //IERC20(_token).safeApprove(address(singleStaking), 2**255-1);
    }

    /**
     * @notice Checks if the msg.sender is the admin address.
     */
    modifier onlyAdmin() {
        if (msg.sender != admin) revert NotAuthorized();
        _;
    }

    /**
     * @notice Checks if the msg.sender is a contract or a proxy.
     */
    modifier notContract() {
        require(!_isContract(_msgSender()), "contract not allowed");
        require(_msgSender() == tx.origin, "proxy contract not allowed");
        _;
    }

    modifier notInitialized() {
        if (initialized) revert OnlyOnce();
        _;
        initialized = true;
    }

    /**
     * @notice Deposits funds into the Vault.
     * @dev Only possible when contract not paused.
     * @param _amount: number of tokens to deposit.
     */
    function deposit(uint256 _amount) external whenNotPaused notContract {
        if (_amount <= 0) revert NonZeroValues();

        uint256 vault = balanceOf();
        token.safeTransferFrom(_msgSender(), address(this), _amount);
        uint256 currentShares = 0;

        if (totalShares != 0) {
            currentShares = (_amount.mul(totalShares)).div(vault);
        } else {
            currentShares = _amount;
        }

        userInfo[_msgSender].shares.add(currentShares);
        userInfo[_msgSender].lastDepositedTime = block.timestamp;

        totalShares = totalShares.add(currentShares);

        userInfo[_msgSender].tokenAtLastUserAction = userInfo[_msgSender].shares.div(totalShares);
        userInfo[_msgSender].lastUserActionTime = block.timestamp;

        _earn();

        emit Deposit(msg.sender, _amount, currentShares, block.timestamp);
    }

    /**
     * @notice Withdraws all funds for a user
     */
    function withdrawAll() external notContract {
        withdraw(userInfo[msg.sender].shares);
    }

    /**
     * @notice Reinvests OLIVE tokens into MasterChef
     * @dev Only possible when contract not paused.
     */
    function harvest() external notContract whenNotPaused {
        IMasterChef(masterchef).deposit(poolId, 0);

        uint256 bal = available();
        uint256 currentPerformanceFee = bal.mul(performanceFee).div(10000);
        token.safeTransfer(treasury, currentPerformanceFee);

        uint256 currentCallFee = bal.mul(callFee).div(10000);
        token.safeTransfer(msg.sender, currentCallFee);

        _earn();

        lastHarvestedTime = block.timestamp;

        emit Harvest(msg.sender, currentPerformanceFee, currentCallFee);
    }

    /**
     * @notice Sets admin address
     * @dev Only callable by the contract owner.
     */
    function setAdmin(address _admin) external onlyOwner {
        require(_admin != address(0), "Cannot be zero address");
        admin = _admin;
    }

    /**
     * @notice Sets treasury address
     * @dev Only callable by the contract owner.
     */
    function setTreasury(address _treasury) external onlyOwner {
        require(_treasury != address(0), "Cannot be zero address");
        treasury = _treasury;
    }

    /**
     * @notice Sets performance fee
     * @dev Only callable by the contract admin.
     */
    function setPerformanceFee(uint256 _performanceFee) external onlyAdmin {
        require(_performanceFee <= MAX_PERFORMANCE_FEE, "performanceFee cannot be more than MAX_PERFORMANCE_FEE");
        performanceFee = _performanceFee;
    }

    /**
     * @notice Sets call fee
     * @dev Only callable by the contract admin.
     */
    function setCallFee(uint256 _callFee) external onlyAdmin {
        require(_callFee <= MAX_CALL_FEE, "callFee cannot be more than MAX_CALL_FEE");
        callFee = _callFee;
    }

    /**
     * @notice Sets withdraw fee
     * @dev Only callable by the contract admin.
     */
    function setWithdrawFee(uint256 _withdrawFee) external onlyAdmin {
        require(_withdrawFee <= MAX_WITHDRAW_FEE, "withdrawFee cannot be more than MAX_WITHDRAW_FEE");
        withdrawFee = _withdrawFee;
    }

    /**
     * @notice Sets withdraw fee period
     * @dev Only callable by the contract admin.
     */
    function setWithdrawFeePeriod(uint256 _withdrawFeePeriod) external onlyAdmin {
        require(
            _withdrawFeePeriod <= MAX_WITHDRAW_FEE_PERIOD,
            "withdrawFeePeriod cannot be more than MAX_WITHDRAW_FEE_PERIOD"
        );
        withdrawFeePeriod = _withdrawFeePeriod;
    }

    /**
     * @notice Withdraws from MasterChef to Vault without caring about rewards.
     * @dev EMERGENCY ONLY. Only callable by the contract admin.
     */
    function emergencyWithdraw() external onlyAdmin {
        IMasterChef(masterchef).emergencyWithdraw(poolId);
    }

    /**
     * @notice Withdraw unexpected tokens sent to the Olive Vault
     */
    function inCaseTokensGetStuck(address _token) external onlyAdmin {
        require(_token != address(token), "Token cannot be same as deposit token");

        uint256 amount = IERC20(_token).balanceOf(address(this));
        IERC20(_token).safeTransfer(msg.sender, amount);
    }

    /**
     * @notice Triggers stopped state
     * @dev Only possible when contract not paused.
     */
    function pause() external onlyAdmin whenNotPaused {
        _pause();
        emit Pause();
    }

    /**
     * @notice Returns to normal state
     * @dev Only possible when contract is paused.
     */
    function unpause() external onlyAdmin whenPaused {
        _unpause();
        emit Unpause();
    }

    /**
     * @notice Calculates the expected harvest reward from third party
     * @return Expected reward to collect in OLIVE
     */
    function calculateHarvestCakeRewards() external view returns (uint256) {
        uint256 amount = IMasterChef(masterchef).pendingOlive(poolId, address(this));
        amount = amount.add(available());
        uint256 currentCallFee = amount.mul(callFee).div(10000);

        return currentCallFee;
    }

    /**
     * @notice Calculates the total pending rewards that can be restaked
     * @return Returns total pending OLIVE rewards
     */
    function calculateTotalPendingCakeRewards() external view returns (uint256) {
        uint256 amount = IMasterChef(masterchef).pendingOlive(poolId, address(this));
        amount = amount.add(available());

        return amount;
    }

    /**
     * @notice Calculates the price per share
     */
    function getPricePerFullShare() external view returns (uint256) {
        return totalShares == 0 ? 1e18 : balanceOf().mul(1e18).div(totalShares);
    }

    /**
     * @notice Withdraws from funds from the Olive Vault
     * @param _shares: Number of shares to withdraw
     */
    function withdraw(uint256 _shares) public notContract {
        UserInfo storage user = userInfo[msg.sender];
        require(_shares > 0, "Nothing to withdraw");
        require(_shares <= user.shares, "Withdraw amount exceeds balance");

        uint256 currentAmount = (balanceOf().mul(_shares)).div(totalShares);
        user.shares = user.shares.sub(_shares);
        totalShares = totalShares.sub(_shares);

        uint256 bal = available();
        if (bal < currentAmount) {
            uint256 balWithdraw = currentAmount.sub(bal);
            IMasterChef(masterchef).withdraw(poolId, balWithdraw);
            uint256 balAfter = available();
            uint256 diff = balAfter.sub(bal);
            if (diff < balWithdraw) {
                currentAmount = bal.add(diff);
            }
        }

        if (block.timestamp < user.lastDepositedTime.add(withdrawFeePeriod)) {
            uint256 currentWithdrawFee = currentAmount.mul(withdrawFee).div(10000);
            token.safeTransfer(treasury, currentWithdrawFee);
            currentAmount = currentAmount.sub(currentWithdrawFee);
        }

        if (user.shares > 0) {
            user.cakeAtLastUserAction = user.shares.mul(balanceOf()).div(totalShares);
        } else {
            user.cakeAtLastUserAction = 0;
        }

        user.lastUserActionTime = block.timestamp;

        token.safeTransfer(msg.sender, currentAmount);

        emit Withdraw(msg.sender, currentAmount, _shares);
    }

    /**
     * @notice Custom logic for how much the vault allows to be borrowed
     * @dev The contract puts 100% of the tokens to work.
     */
    function available() public view returns (uint256) {
        return token.balanceOf(address(this));
    }

    /**
     * @notice Calculates the total underlying tokens
     * @dev It includes tokens held by the contract and held in MasterChef
     */
    function balanceOf() public view returns (uint256) {
        (uint256 amount, ) = userInfo(address(this));
        return token.balanceOf(address(this)).add(amount);
    }

    /**
     * @notice Deposits tokens into MasterChef to earn staking rewards
     */
    function _earn() internal {
        uint256 bal = available();
        if (bal > 0) {
            IMasterChef(masterchef).deposit(poolId, bal);
        }
    }

    /**
     * @notice Checks if address is a contract
     * @dev It prevents contract from being targeted
     */
    function _isContract(address addr) internal view returns (bool) {
        uint256 size;
        assembly {
            size := extcodesize(addr)
        }
        return size > 0;
    }
}